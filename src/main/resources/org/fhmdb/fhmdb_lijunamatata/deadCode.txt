

    /**
     * Filters a list of movies based on the provided search text and selected genre.
     * The method checks if the movie's title contains the search text (ignoring case)
     * and if the movie's genre matches the selected genre.
     *
     * @param movies     The list of movies to be filtered.
     * @param searchText The text to search for in movie titles.
     * @param genre      The genre to filter movies by. If {@code null}, no genre filtering is applied.
     * @return A list of movies that match both the search text and selected genre.
     */
    public List<Movie> filterMovies(List<Movie> movies, String searchText, Genre genre) {
        if(movies != null && !movies.isEmpty()) {
            List<Movie> filteredMovies = new ArrayList<>();
            for (Movie movie : movies) {
                boolean matchesSearchText = isMatchesSearchText(searchText, movie);
                boolean matchesGenre = isMatchesGenre(genre, movie);
                if (matchesSearchText && matchesGenre) {
                    filteredMovies.add(movie);
                }
            }
            return filteredMovies;
        }
        return new ArrayList<>();
    }


    /**
     * Checks if the movie's genres contain the selected genre.
     * Returns {@code true} if the movie matches the selected genre or if no genre is selected.
     *
     * @param genre The genre to check against.
     * @param movie The movie to check.
     * @return {@code true} if the movie matches the selected genre or if no genre is selected; {@code false} otherwise.
     */
    private static boolean isMatchesGenre(Genre genre, Movie movie) {
        return (genre == null || movie.getGenres().contains(genre));
    }

    /**
     * Checks if the movie's title and description contains the search text, ignoring case.
     *
     * @param searchText The text to search for in the movie's title.
     * @param movie      The movie whose title is to be checked.
     * @return {@code true} if the movie's title and the movie's description contains the search text; {@code false} otherwise.
     */
    private static boolean isMatchesSearchText(String searchText, Movie movie) {
        if(searchText == null) {
            searchText = "";
        }
            return movie.getTitle().toLowerCase().contains(searchText.toLowerCase()) ||
                    movie.getDescription().toLowerCase().contains(searchText.toLowerCase());
    }





    @Test
    @DisplayName("Test updateMovieListView should call updateLabelStatus method with correct parameter")
    public void updateMovieListView_calls_movieServiceFilterLabelStatus_withCorrectParameter() throws InterruptedException {
        // Set filtered movies to an empty list to trigger the "No movies found!" message
        movieController.setFilteredMovies(Collections.emptyList());
        movieController.updateMovieListView();
        verify(movieController).updateStatusLabel("No movies found!", false);

        // Now set filtered movies to initialMovies and call the method again
        movieController.setFilteredMovies(initialMovies);
        movieController.updateMovieListView();
        verify(movieController).updateStatusLabel("", false);
    }