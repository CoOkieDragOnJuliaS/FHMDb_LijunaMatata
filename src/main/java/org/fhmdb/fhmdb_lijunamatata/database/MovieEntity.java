package org.fhmdb.fhmdb_lijunamatata.database;

import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.table.DatabaseTable;
import org.fhmdb.fhmdb_lijunamatata.exceptions.DatabaseException;
import org.fhmdb.fhmdb_lijunamatata.models.Genre;
import org.fhmdb.fhmdb_lijunamatata.models.Movie;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

@DatabaseTable(tableName = "movie")
public class MovieEntity {
    @DatabaseField(generatedId = true) //ids will get generated by database
    private long id;

    @DatabaseField() //if not specified field name will be variable name
    private String apiId;

    @DatabaseField()
    private String title;

    @DatabaseField()
    private String description;

    @DatabaseField()
    private String genres;

    @DatabaseField()
    private int releaseYear;

    @DatabaseField()
    private String imgUrl;

    @DatabaseField()
    private int lengthInMinutes;

    @DatabaseField()
    private double rating;

    public MovieEntity() {
        //No-argument constructor is needed by ORM (InvalidArgumentException otherwise)
    }

    /**
     * initializes a MovieEntity from a Movie object
     *
     * @param movie Movie object
     */
    public MovieEntity(Movie movie) {
        this.apiId = movie.getId();
        this.title = movie.getTitle();
        this.genres = genresToString(movie.getGenres());
        this.releaseYear = movie.getReleaseYear();
        this.imgUrl = movie.getImgUrl();
        this.lengthInMinutes = movie.getLengthInMinutes();
        this.rating = movie.getRating();
    }

    /**
     * creates a list of Movie objects from a list of MovieEntity objects
     *
     * @param movies List<Movie>
     * @return List<MovieEntity>
     */
    public static List<MovieEntity> fromMovies(List<Movie> movies) {
        return movies.stream()
                .map(MovieEntity::new) //constructs one MovieEntity for each Movie
                .collect(Collectors.toList());
    }

    /**
     * initializes Movie from MovieEntity object
     * @param movieEntity MovieEntity object
     * @return new Movie object
     */
    public static Movie toMovie(MovieEntity movieEntity) {
        try {
            return new Movie(
                    movieEntity.getApiId(),
                    movieEntity.getTitle(),
                    stringToGenres(movieEntity.getGenres()),
                    movieEntity.getReleaseYear(),
                    movieEntity.getDescription(),
                    movieEntity.getImgUrl(),
                    movieEntity.getLengthInMinutes(),
                    Collections.emptyList(),
                    Collections.emptyList(),
                    Collections.emptyList(),
                    movieEntity.getRating());
        } catch (IllegalArgumentException e) {
            throw e;
        }
    }

    /**
     * Initializes a list of Movie objects from list of MovieEntity objects
     * @param movieEntities List<MovieEntity>
     * @return List<Movie>
     */
    public static List<Movie> toMovies(List<MovieEntity> movieEntities) {
        if (movieEntities == null) {
            return Collections.emptyList();
        }
        return movieEntities.stream()
                .map(MovieEntity::toMovie)
                .collect(Collectors.toList());

    }

    /**
     * Converts a list of genres to a comma-separated string
     *
     * @param genres List<Genre>
     * @return comma-separated String of genres
     */
    protected static String genresToString(List<Genre> genres) {
        if (genres == null || genres.isEmpty()) {
            return "";
        }
        return genres.stream()
                .map(Enum::name) //get name of each Genre enum
                .collect(Collectors.joining(", ")); //join genres by comma
    }

    protected static Genre stringToGenre(String genreString) {
        try {
            return Genre.valueOf(genreString.trim().toUpperCase().replace(" ", "_"));
        } catch (IllegalArgumentException e) {
            throw new DatabaseException("Invalid genre: " + genreString, e);
        }
    }

    protected static List<Genre> stringToGenres(String genresString) throws IllegalArgumentException {
        if (genresString == null || genresString.trim().isEmpty()) {
            return Collections.emptyList();
        }
        try {
            return Arrays.stream(genresString.split(",")) //split by comma
                    .map(String::trim)//trim whitespaces
                    .filter(genreString -> !genreString.isEmpty())//ignore empty entries
                    .map(MovieEntity::stringToGenre) //convert each string to GENRE enum
                    .collect(Collectors.toList());
        } catch (IllegalArgumentException e) {
            throw new DatabaseException("Failed to parse genre list: '" + genresString + "'", e);
        }
    }


    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getApiId() {
        return apiId;
    }

    public void setApiId(String apiId) {
        this.apiId = apiId;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getGenres() {
        return genres;
    }

    public void setGenres(String genres) {
        this.genres = genres;
    }

    public int getReleaseYear() {
        return releaseYear;
    }

    public void setReleaseYear(int releaseYear) {
        this.releaseYear = releaseYear;
    }


    public String getImgUrl() {
        return imgUrl;
    }

    public void setImgUrl(String imgUrl) {
        this.imgUrl = imgUrl;
    }

    public int getLengthInMinutes() {
        return lengthInMinutes;
    }

    public void setLengthInMinutes(int lengthInMinutes) {
        this.lengthInMinutes = lengthInMinutes;
    }

    public double getRating() {
        return rating;
    }

    public void setRating(double rating) {
        this.rating = rating;
    }
}
